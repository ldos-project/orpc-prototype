use quote::{format_ident, quote, quote_spanned, ToTokens};
use syn::{spanned::Spanned, FieldsNamed, ItemStruct, LitStr, Path, Token};

use crate::{parsing_utils::make_oqueues_field_name};

/// The implementations of the `orpc_server` attr macro.
pub fn orpc_server_macro_impl(
    traits: syn::punctuated::Punctuated<Path, Token!(,)>,
    input: syn::ItemStruct,
) -> proc_macro2::TokenStream {
    let mut errors = Vec::new();

    // The fields holding the OQueues for each trait. These structs are generated by the `orpc_trait` macro.
    let oqueue_fields: Vec<_> = traits
        .iter()
        .map(|trait_ident| {
            let oqueue_field_ident = make_oqueues_field_name(&mut errors, trait_ident);
            let trait_ident = {
                let mut trait_ident = trait_ident.clone();
                if let Some(last_type_segment) = trait_ident.segments.last_mut() {
                    last_type_segment.ident = format_ident!(
                        "{}OQueues",
                        last_type_segment.ident,
                        span = last_type_segment.ident.span()
                    );
                }
                trait_ident
            };
            quote! {
                #[allow(unused)]
                #oqueue_field_ident: #trait_ident
            }
        })
        .collect();

    // The names of the OQueue fields.
    let oqueue_field_names: Vec<_> = traits
        .iter()
        .map(|i| make_oqueues_field_name(&mut errors, i))
        .collect();

    let orpc_internal_struct_doc = LitStr::new(&format!("The ORPC internal data structure for {}", input.ident.to_string()), input.span());

    let ItemStruct {
        attrs,
        vis,
        struct_token,
        ident,
        generics,
        fields,
        semi_token,
    } = input;
    let orpc_internal_struct_ident = format_ident!("{}ORPCInternal", ident.to_string(), span = ident.span());
    // All the fields of the user declared server struct with the added orpc_internal field.
    let fields = match fields {
        syn::Fields::Named(FieldsNamed { named, .. }) => {
            let named = named.iter();
            quote! { 
                {
                    #(#named,)*
                    #[doc(hidden)]
                    #[doc = "The internal ORPC framework data associated with this server."]
                    orpc_internal: #orpc_internal_struct_ident
                }
            }
        }
        fs => {
            errors.push(quote_spanned! { fs.span() =>
                compile_error!("servers must have named fields")
            });
            fs.to_token_stream()
        }
    };

    // The initializer for the ORPC internals struct for this server type
    let internal_init = quote! {
        #orpc_internal_struct_ident {
            base: ::orpc::orpc_impl::framework::ServerBase::new(weak_this.clone()),
            #(#oqueue_field_names: ::core::default::Default::default()),*
        }
    };

    // The implementation of `new_with` for this server.
    let new_with_impl = quote! {
        impl #generics #ident {
            #[doc = "\
Create a new instance of Self constructed using `f`. `f` takes the ORPC internal data
for this server and should return an instance of the server.
For example,
```ignore
let server = Self::new_with(|orpc_internal| Self {
    increment,
    atomic_count,
    orpc_internal,
})?;
```
"]
            #vis fn new_with(
                f: impl FnOnce(#orpc_internal_struct_ident) -> Self,
            ) -> ::orpc::orpc_impl::ServerRef<Self> {
                let server = ::alloc::sync::Arc::<Self>::new_cyclic(|weak_this| {
                    let orpc_internal = #internal_init;
                    f(orpc_internal)
                });
                server
            }
        }
    };

    let output = quote! {
        #(#attrs)*
        #vis
        #struct_token
        #ident
        #generics
        #fields
        #semi_token

        impl #generics ::orpc::Server for #ident {
            fn orpc_server_base(&self) -> &::orpc::orpc_impl::framework::ServerBase {
                &self.orpc_internal.base
            }
        }

        #new_with_impl

        #[doc(hidden)]
        #[doc = #orpc_internal_struct_doc]
        #[allow(non_snake_case)]
        struct #orpc_internal_struct_ident {
            base: ::orpc::orpc_impl::framework::ServerBase,
            #(
                #oqueue_fields
            ),*
        }

        #(#errors;)*
    };

    output
}
